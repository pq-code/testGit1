#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 获取当前分支
current_branch=$(git rev-parse --abbrev-ref HEAD)

# 获取目标分支
if git rev-parse --verify MERGE_HEAD &> /dev/null; then
  target_branch=$(git rev-parse --abbrev-ref $(git rev-parse --verify MERGE_HEAD))
  # 获取合并的源分支
  merge_base=$(git merge-base HEAD MERGE_HEAD)
  source_branch=$(git branch --contains $merge_base | grep -v '^\*' | tr -d ' ')
else
  target_branch="N/A"
  source_branch="N/A"
fi

echo -e "\033[33m -------------------  当前分支: $current_branch 正在对提交的代码执行操作 -------------------- \033[0m"
echo -e "\033[33m -------------------  目标分支: $target_branch 正在对提交的代码执行操作 -------------------- \033[0m"
echo -e "\033[33m -------------------  当前合并分支: $source_branch 正在对提交的代码执行操作 -------------------- \033[0m"


# 如果是尝试将 test 分支合并到其他分支，则阻止该操作
if [ "$current_branch" != "test" ] && [ "$target_branch" = "test" ]; then
  echo "Cannot merge from test branch to $target_branch."
  exit 1
fi


# 检查是否存在冲突文件
conflict_files=$(git ls-files -u | cut -f2 | sort -u)
if [ -n "$conflict_files" ]; then
  echo "存在未解决的冲突文件，不能提交。请先解决冲突。"
  exit 1
fi


exit 0
